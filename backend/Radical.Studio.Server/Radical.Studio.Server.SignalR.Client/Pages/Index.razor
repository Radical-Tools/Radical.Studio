@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Workspace:
        <input @bind="workspace" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="CreateWorkspace" disabled="@(!IsConnected)">Create Workspace</button>
<button @onclick="RemoveWorkspace" disabled="@(!IsConnected)">Remove Workspace</button>
<button @onclick="JoinWorkspace" disabled="@(!IsConnected)">Join Workspace</button>
<button @onclick="LeaveWorkspace" disabled="@(!IsConnected)">Leave Workspace</button>
<button @onclick="Connect" disabled="@(IsConnected)">Connect</button>
<input @bind="CurrentValue" />
<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? workspace;
    private string? messageInput;
    private string CurrentValue = "http://localhost:5211";

    private async Task Connect()
    {
        if (hubConnection is null)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri(CurrentValue + "/workspace"))
            .Build();

            hubConnection.On<Guid>("WorkspaceCreated", (guid) =>
            {
                var encodedMsg = $"{guid}";
                workspace = guid.ToString();
                messages.Add(encodedMsg);
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On("LeaveWorkspace", () =>
            {
                var encodedMsg = $"LeaveWorkspace";
                messages.Add(encodedMsg);
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On("WorkspaceRemoved", () =>
            {
                var encodedMsg = $"WorkspaceRemoved";
                messages.Add(encodedMsg);
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }
    }

    private async Task CreateWorkspace()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("CreateWorkspace");
        }
    }

    private async Task RemoveWorkspace()
    {
        if (hubConnection is not null)
        {
            var workspaceGuid = new Guid(workspace);
            await hubConnection.SendAsync("RemoveWorkspace", workspaceGuid);
        }
    }

    private async Task JoinWorkspace()
    {
        if (hubConnection is not null)
        {
            var workspaceGuid = new Guid(workspace);
            await hubConnection.SendAsync("JoinWorkspace", workspaceGuid);
        }
    }

    public async Task LeaveWorkspace()
    {
        if (hubConnection is not null)
        {
            var workspaceGuid = new Guid(workspace);
            await hubConnection.SendAsync("LeaveWorkspace", workspaceGuid);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}